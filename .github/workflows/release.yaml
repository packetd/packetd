name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.0'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpcap-dev gcc-multilib gcc-aarch64-linux-gnu
          # 安装 ARM64 版本的 libpcap
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y libpcap-dev:arm64

      - name: Install dependencies
        run: make mod

      - name: Install build tools
        run: make tools

      - name: Run tests
        run: make test

      - name: Create dist directory
        run: mkdir -p dist

      - name: Build cross-platform binaries
        run: |
          VERSION=$(cat VERSION)
          COMMIT=$(git rev-parse HEAD)
          BUILD_DATE=$(date -u '+%Y-%m-%d_%H:%M:%S')

          # Build for Linux amd64 (native compilation)
          echo "Building for linux/amd64..."
          CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build \
            -ldflags="-s -w -X 'github.com/packetd/packetd/common.buildVersion=${VERSION}' -X 'github.com/packetd/packetd/common.buildTime=${BUILD_DATE}' -X 'github.com/packetd/packetd/common.buildHash=${COMMIT}'" \
            -o "dist/packetd-${VERSION}-linux-amd64" .

          # Build for Linux arm64 (cross compilation)
          echo "Building for linux/arm64..."
          CGO_ENABLED=1 GOOS=linux GOARCH=arm64 CC=aarch64-linux-gnu-gcc \
          PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig go build \
            -ldflags="-s -w -X 'github.com/packetd/packetd/common.buildVersion=${VERSION}' -X 'github.com/packetd/packetd/common.buildTime=${BUILD_DATE}' -X 'github.com/packetd/packetd/common.buildHash=${COMMIT}'" \
            -o "dist/packetd-${VERSION}-linux-arm64" .

          # Build for other platforms without pcap (CGO disabled)
          platforms_nocgo=(
            "darwin/amd64"
            "darwin/arm64"
            "windows/amd64"
            "freebsd/amd64"
          )

          for platform in "${platforms_nocgo[@]}"; do
            GOOS=${platform%/*}
            GOARCH=${platform#*/}
            output_name="packetd-${VERSION}-${GOOS}-${GOARCH}"

            if [ "$GOOS" = "windows" ]; then
              output_name+=".exe"
            fi

            echo "Building for $GOOS/$GOARCH (without CGO)..."
            CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH go build \
              -ldflags="-s -w -X 'github.com/packetd/packetd/common.buildVersion=${VERSION}' -X 'github.com/packetd/packetd/common.buildTime=${BUILD_DATE}' -X 'github.com/packetd/packetd/common.buildHash=${COMMIT}'" \
              -o "dist/${output_name}" .
          done

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/packetd-linux-amd64
            dist/packetd-linux-arm64
            dist/packetd-windows-amd64.exe
            dist/packetd-darwin-amd64
            dist/packetd-darwin-arm64
            dist/packetd-freebsd-amd64
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}